#------------------------------------------------------------
#                            ___ ___ ___ ___
#  ___ ___ ___ ___ ___      |  _| __|   |__ |
# |  _| . |_ -|  _| . |     | . |__ | | | __|
# |_| |___|___|___|___|_____|___|___|___|___|
#                     |_____|   8K ROM config
#------------------------------------------------------------
# Copyright (c)2022-2024 Ross Bamford, Xark and contributors
# See top-level LICENSE.md for licence information.

SYMBOLS {
    __FW_VARSTART__:    type = export,  value = $0200;   # $0200-$0220 FW variables
    __FW_VARSIZE__:     type = export,  value = $0020;   # 32 bytes 
    __FW_VECSTART__:    type = export,  value = $0220;   # $0220-$0280 FW RAM vectors
    __FW_VECSIZE__:     type = export,  value = $0060;   # 96 bytes 
    __FW_THUNKSTART__:  type = export,  value = $0280;   # $0280-$02FF FW thunk code
    __FW_THUNKSIZE__:   type = export,  value = $0080;   # 128 bytes 
    __BANKRAMSTART__:   type = export,  value = $4000;
    __BANKRAMSIZE__:    type = export,  value = $8000;   # 32K banked RAM x 16
    __BANKROMSTART__:   type = export,  value = $E000;
    __BANKROMSIZE__:    type = export,  value = $2000;   # 8K ROM
}
MEMORY {
    ZP:         file = "",      start = $0000,                  size = $0100;
    FWVAR:      file = "",      start = __FW_VARSTART__,        size = __FW_VARSIZE__;
    FWVEC:      file = "",      start = __FW_VECSTART__,        size = __FW_VECSIZE__;
    FWTHUNK:    file = "",      start = __FW_THUNKSTART__,      size = __FW_THUNKSIZE__;
    BROM0:      file = %O,      start = __BANKROMSTART__,       size = __BANKROMSIZE__, bank = $00 , fill = yes;
}
SEGMENTS {
    ZEROPAGE:   load = ZP,                      type = zp;
    ROMCOMMON0: load = BROM0,                   type = ro;
    ROM0:       load = BROM0,                   type = ro;
    RODATA0:    load = BROM0,                   type = ro,      optional = yes;    
    VECINIT:    load = BROM0, run = FWVEC,      type = ro,      define = yes,   optional = yes;
    THUNKINIT:  load = BROM0, run = FWTHUNK,    type = ro,      define = yes,   optional = yes;
    VECTORS0:   load = BROM0,                   type = ro,      start = $FFFA;
}
